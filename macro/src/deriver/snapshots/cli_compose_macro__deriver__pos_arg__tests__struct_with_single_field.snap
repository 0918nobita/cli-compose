---
source: macro/src/deriver/pos_arg.rs
assertion_line: 146
expression: "test_pos_arg_deriver(quote! { struct Foo(String) ; }).unwrap()"
---
impl cli_compose::schema::AsMember for Foo {
    fn handle(mut builder: cli_compose::schema::CliBuilder) -> cli_compose::schema::CliBuilder {
        use cli_compose::schema::{
            forwarded::{quote, syn},
            AsPosArg,
        };
        let name = <Foo as AsPosArg>::name();
        let res_ty = <syn::Type as quote::ToTokens>::into_token_stream(<Foo as AsPosArg>::result())
            .to_string();
        builder
            .ops
            .extend(quote::quote! { println ! ("PosArg {} ({})" , # name , # res_ty) ; });
        builder
    }
}
impl cli_compose::schema::AsPosArg for Foo {
    fn name() -> String {
        "foo".to_owned()
    }
    fn description() -> String {
        "".to_owned()
    }
    fn parse(s: &str) -> Option<Self> {
        <String as std::str::FromStr>::from_str(s).ok().map(Self)
    }
    fn result() -> cli_compose::schema::forwarded::syn::Type {
        cli_compose::schema::forwarded::syn::parse_str("String").unwrap()
    }
}

