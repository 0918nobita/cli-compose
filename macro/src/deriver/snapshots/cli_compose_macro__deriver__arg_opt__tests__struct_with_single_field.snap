---
source: macro/src/deriver/arg_opt.rs
assertion_line: 147
expression: "test_arg_opt_deriver(quote! { struct Foo(String) ; }).unwrap()"
---
impl cli_compose::schema::AsMember for Foo {
    fn handle(mut builder: cli_compose::schema::CliBuilder) -> cli_compose::schema::CliBuilder {
        use cli_compose::schema::{forwarded::quote::quote, AsArgOpt};
        let flag = format!("{}", <Foo as AsArgOpt>::flag());
        builder
            .ops
            .extend(quote! { println ! ("ArgOpt {}" , # flag) ; });
        builder
    }
}
impl cli_compose::schema::AsArgOpt for Foo {
    fn flag() -> cli_compose::schema::Flag {
        cli_compose::schema::Flag::LongOnly("foo".to_owned())
    }
    fn description() -> String {
        "".to_owned()
    }
    fn parse(s: &str) -> Option<Self> {
        let val = <String as std::str::FromStr>::from_str(s).ok()?;
        Some(Foo(val))
    }
}

