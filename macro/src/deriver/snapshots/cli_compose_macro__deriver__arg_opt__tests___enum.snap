---
source: macro/src/deriver/arg_opt.rs
assertion_line: 160
expression: "test_derive_arg_opt(quote! { enum Foo { Bar, Baz } }).unwrap()"
---
impl cli_compose::schema::AsMember for Foo {
    fn handle(mut builder: cli_compose::schema::CliBuilder) -> cli_compose::schema::CliBuilder {
        let flag = format!("{}", <Foo as cli_compose::schema::AsArgOpt>::flag());
        builder
            .ops
            .extend(cli_compose::schema::quote! { println ! ("   Opt {}" , # flag) ; });
        builder
    }
}
impl cli_compose::schema::AsArgOpt for Foo {
    fn flag() -> cli_compose::schema::Flag {
        cli_compose::schema::Flag::LongOnly("foo".to_owned())
    }
    fn description() -> String {
        "".to_owned()
    }
    fn parse(s: &str) -> Option<Self> {
        <Foo as std::str::FromStr>::from_str(s).ok()
    }
}

